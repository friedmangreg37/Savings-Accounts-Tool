@model Budgeting.Models.SavingsAccount

@{
    ViewBag.Title = "Account Breakdown";
}

<h2>@Model.Name</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h3>Account Breakdown</h3>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        <div class="row">
            <div class="col-md-1">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
            </div>
            <div class="col-md-1">
                @Html.LabelFor(model => model.Balance, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.EditorFor(model => model.Balance, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Balance, "", new {@class = "text-danger"})
            </div>
        </div>

        <h4>Funds</h4>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    Amount/Month
                </th>
                <th>
                    Balance
                </th>
                <th>
                    Actions
                </th>
                <th></th>
            </tr>

            @foreach (var fund in Model.Funds)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(f => fund.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(f => fund.AmountPerMonth)
                    </td>
                    <td>
                        @Html.DisplayFor(f => fund.Balance)
                    </td>
                    <td>
                        @Html.ActionLink("Deposit", "Deposit", "Transaction", new {fundId = fund.Id}, null) |
                        @Html.ActionLink("Withdraw", "Withdraw", "Transaction", new {fundId = fund.Id}, null)
                    </td>
                    <td>
                        @Html.ActionLink("Delete", "Delete", "SavingsFund", new {id = fund.Id}, null)
                    </td>
                </tr>
            }
            @if (Model.UnallocatedFunds > 0)
            {
                <tr>
                    <td>
                        @Html.DisplayNameFor(model => model.UnallocatedFunds)
                    </td>
                    <td></td>
                    <td>
                        @Html.DisplayFor(model => model.UnallocatedFunds)
                    </td>
                    <td></td>
                    <td></td>
                </tr>
            }
        </table>
        @Html.ActionLink("Add New Fund", "Create", "SavingsFund", new {accountID = Model.Id}, null)
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
